#! /usr/bin/env Rscript

####
## This script is to prepare the gene bodies bedfiles with windows
####

library(argparse)
library(GenomicRanges)
library(rtracklayer)
library(dplyr)

# parser <- ArgumentParser()
# parser$add_argument("-a","--annotation", dest="annotation", type = "character",
# 					                    required=TRUE, help="bed file containing of non overlapping genes")
# parser$add_argument("-w","--windowsize", dest="windowsize", type = "integer",
# 					                    required=TRUE, help="window size for to seperate the gene bodies")
# #parser$add_argument("-o","--output", dest="output", type="character",
# #					                    default = "stdout", help="File to store output in. Defaults to stdout.")
# args <- parser$parse_args()
# 

# convert bed file into granges object
gene_gr = import('C:/Users/lenovo/Desktop/pausing_scripts/revised_sytenic/test_non_overlapping_genes.bed')
gene_gr$score <-NULL

# filtered out genes with less than 10kb 
gene_gr = gene_gr[width(gene_gr)>10000]
#width(gene_gr)

# function for producing all windows for a gene
produce_windows <- function(gr, ws){
  if (as.character(strand(gr)) == '+'){
    start = start(gr) + 1000
    end = start(gr) + 10000
    start_array = seq(start, end-ws, ws)
    end_array = seq(start+ws-1, end, ws)
  }
  else if (as.character(strand(gr)) == '-'){
    start = end(gr) - 10000
    end = end(gr) - 1000
    start_array = seq(start, end-ws, ws)
    end_array = seq(start+ws-1, end, ws)
  }
  sub_gr = GRanges(seqnames = seqnames(gr),
                   ranges = IRanges(start = start_array, end = end_array),
                   strand = strand(gr),
                   name = gr$name)
  return(sub_gr)
}


result = produce_windows(gene_gr[1], 50)
result


